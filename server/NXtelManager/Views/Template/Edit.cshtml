@model NXtelManager.Models.TemplateEditModel
@{
    var template = Model.Template;
    ViewBag.Title = (Model.Copying ? "Copy" : (@template.TemplateID <= 0 ? "New" : "Edit")) + " Template";
    string templateID = @template.TemplateID <= 0 ? "NEW" : @template.TemplateID.ToString();
    string x = @template.TemplateID <= 0 && !Model.Copying ? "" : @template.X.ToString();
    string y = @template.TemplateID <= 0 && !Model.Copying ? "" : @template.Y.ToString();
    string width = @template.TemplateID <= 0 && !Model.Copying ? "" : @template.Width.ToString();
    string height = @template.TemplateID <= 0 && !Model.Copying ? "" : @template.Height.ToString();
    string placeholder = Model.Copying ? Model.OldDescription : "";
    bool admin = User.IsInRole("Admin");
}
<h1>@ViewBag.Title</h1>
<h3>@ViewBag.Message</h3>
@using (Html.BeginForm("Edit", "Template", new { id = template.TemplateID }))
{
    @Html.AntiForgeryToken()
    @Html.Hidden("CopyTemplateID", Model.CopyTemplateID)
    <table id="tblEdit" class="edit">
        <tbody>
            <tr>
                <td class="lbl">Template ID</td>
                <td class="data" colspan="5">@templateID@Html.Hidden("TemplateID", @template.TemplateID)</td>
            </tr>
            <tr>
                <td class="lbl">Description</td>
                <td class="data" colspan="5">@Html.TextBox("Description", template.Description, new { maxlength = 30, style = "width:100%;max-width:initial", placeholder = placeholder, @class = "form-control input-sm" })</td>
            </tr>
            <tr>
                <td class="lbl">URL</td>
                <td class="data">@Html.TextArea("URL", template.URL, new { @class = "form-control input-sm", style = "resize:vertical;height:45px;min-height:45px" })</td>
            </tr>
            <tr>
                <td class="lbl" style="vertical-align:top">Content</td>
                <td class="data">
                    <div id="canvasframePreview" style="float:left">
                        <canvas id="framePreview" width="960" height="1000" style="width: 576px; height: 500px;"></canvas>
                    </div>
                    <a id="EditContent" href="#" class="ordered ordered-btn edit" onclick="launchEditor();return false;"
                       style="display:inline-block;margin:4px;float:left;display:none" title="Edit template content">Edit</a>
                    <a id="EditZXNet" href="#" class="ordered ordered-btn open" onclick="launchZXNet();return false;"
                       style="display:inline-block;margin:4px;float:left;display:none" title="Open in ZXNet">Open in ZXNet</a>
                    <a id="EditEditTF" href="#" class="ordered ordered-btn open" onclick="launchEditTF(); return false;"
                       style="display:inline-block;margin:4px;float:left;display:none" title="Open in edit-tf">Open in edit-tf</a>
                </td>
            </tr>
            <tr>
                <td class="lbl" style="vertical-align:top">Templates</td>
                <td id="PageTemplates" class="data">
                    @Html.Hidden("SelectedTemplates", template.SelectedTemplates)
                    <table style="display:inline">
                        <tbody id="tbodyPageTemplates">
                            @for (int i = 0; i < template.ChildTemplates.Count; i++)
                            {
                                string id = "trPageTemplate" + (i + 1).ToString();
                                string tid = template.ChildTemplates[i].TemplateID.ToString();
                                int children = template.ChildTemplates[i].CountChildren();
                                string desc = @template.ChildTemplates[i].Description + (children == 0 ? "" : " (+" + children + ")");
                                <tr id="@id" class="template ordered" data-template-id="@tid">
                                    <td>
                                        @Html.Hidden("Templates[" + i + "].TemplateID", template.ChildTemplates[i].TemplateID)
                                        @Html.Hidden("Templates[" + i + "].Description", template.ChildTemplates[i].Description)
                                        @Html.ActionLink(@desc, "Edit", "Template", new { id = template.ChildTemplates[i].TemplateID }, null)
                                    </td>
                                    <td><a href="#" class="ordered ordered-btn up" title="Move template up">Up</a></td>
                                    <td><a href="#" class="ordered ordered-btn down" title="Move template down">Down</a></td>
                                    <td><a href="#" class="ordered ordered-btn delete" title="Delete template">Delete</a></td>
                                </tr>
                            }
                        </tbody>
                        <tbody style="display:none">
                            <tr id="trPageTemplateXXX" class="template ordered">
                                <td>@Html.DropDownList("TemplateMasterListXXX", Model.Templates)</td>
                                <td><a href="#" class="ordered ordered-btn up" title="Move template up">Up</a></td>
                                <td><a href="#" class="ordered ordered-btn down" title="Move template down">Down</a></td>
                                <td><a href="#" class="ordered ordered-btn delete" title="Delete template">Delete</a></td>
                            </tr>
                        </tbody>
                    </table>
                    <a href="#" class="ordered ordered-btn add" title="Add template" style="display:inline-block;position:relative;top:-3px">Add</a>
                </td>
            </tr>
            <tr>
                <td class="lbl">X</td>
                <td class="data">@Html.TextBox("X", x, new { maxlength = 2, onkeypress = "javascript:return allownumbers(event);", @class = "form-control input-sm", style = "text-align:right;width:35px" })</td>
            </tr>
            <tr>
                <td class="lbl">Y</td>
                <td class="data">@Html.TextBox("Y", y, new { maxlength = 2, onkeypress = "javascript:return allownumbers(event);", @class = "form-control input-sm", style = "text-align:right;width:35px" })</td>
            </tr>
            <tr>
                <td class="lbl">Width</td>
                <td class="data">@Html.TextBox("Width", width, new { maxlength = 2, onkeypress = "javascript:return allownumbers(event);", @class = "form-control input-sm", style = "text-align:right;width:35px" })</td>
            </tr>
            <tr>
                <td class="lbl">Height</td>
                <td class="data">@Html.TextBox("Height", height, new { maxlength = 2, onkeypress = "javascript:return allownumbers(event);", @class = "form-control input-sm", style = "text-align:right;width:35px" })</td>
            </tr>
            <tr>
                <td class="lbl"></td>
                <td class="data">
                    @Html.CheckBox("IsContainer", template.IsContainer, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.IsContainer)</span>
                    @Html.CheckBox("IsRepeatingItem", template.IsRepeatingItem, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.IsRepeatingItem)</span>
                    @Html.CheckBox("CanExpand", template.CanExpand, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.CanExpand)</span>
                    @Html.CheckBox("StickToTop", template.StickToTop, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.StickToTop)</span>
                    @Html.CheckBox("StickToBottom", template.StickToBottom, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.StickToBottom)</span>
            </tr>
            <tr>
                <td class="lbl"></td>
                <td class="data">
                    @Html.CheckBox("ContinuedOver", template.ContinuedOver, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.ContinuedOver)</span>
                    @Html.CheckBox("ContinuedFrom", template.ContinuedFrom, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.ContinuedFrom)</span>
                    @Html.CheckBox("NotContinuedOver", template.NotContinuedOver, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.NotContinuedOver)</span>
                    @Html.CheckBox("NotContinuedFrom", template.NotContinuedFrom, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.NotContinuedFrom)</span>
                    @Html.CheckBox("KeepTogether", template.KeepTogether, new { @class = "inline" })<span class="lbl">@Html.LabelFor(t => template.KeepTogether)</span>
                </td>
            </tr>
            <tr>
                <td class="lbl">Orphan/Widow</td>
                <td class="data">@Html.TextBox("MinOrphanWidowRows", template.MinOrphanWidowRows, new { maxlength = 2, onkeypress = "javascript:return allownumbers(event);", @class = "form-control input-sm", style = "text-align:right;width:35px" })</td>
            </tr>
            <tr>
                <td class="lbl">Expression</td>
                <td class="data">@Html.TextBox("Expression", template.Expression, new { maxlength = 300, style = "width:100%;max-width:initial", @class = "form-control input-sm" })</td>
            </tr>
            <tr>
                <td class="lbl">Owner</td>
                <td class="data">
                    @Html.Hidden("OwnerID", template.OwnerID)
                    @if (admin)
                    {
                        <select id="Owner">
                            @foreach (var owner in Model.Owners)
                            {
                                string sel = template.OwnerID.ToString() == owner.Value ? "selected=\"selected\"" : "";
                                <option @sel value="@owner.Value">@owner.Text</option>
                            }
                        </select>
                    }
                    else
                    {
                        @Model.GetOwner(template.OwnerID)
                    }
                </td>
            </tr>
        </tbody>
    </table>
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    <input type="submit" value="Save" name="action:Save" class="btn btn-primary" onclick="return validateSave();" />
    <input type="submit" value="Delete" name="action:Delete" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this template?');" />
    @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-default" })
    @Html.ActionLink("New", "Edit", new { id = "" }, new { @class = "btn btn-default", style = "margin-left:4px" })
    if (template.TemplateID > 0)
    {
        @Html.ActionLink("Copy", "Copy", new { id = @template.TemplateID }, new { @class = "btn btn-default", style = "margin-left:4px" })
    }
}

@section head {
    <link type="text/css" rel="stylesheet" href="~/Content/teletext.css" />
    <style type="text/css">
        .ordered-btn.no-rows { top: 2.5px !important; }
        .ordered-btn.some-rows { top: -3.5px !important; }
    </style>
}

@section editor {
    @Html.Partial("_Editor")
}

@section Scripts {
    <script type="text/javascript" src="~/Scripts/teletext-editor.js"></script>
    <script type="text/javascript" src="~/Scripts/editor.js"></script>
<script type="text/javascript">
    var nextID = 0;

    $(document).ready(function () {
        fixAddButtons();
        @if(Model.SendURL)
        {
            <text>sendURL();</text>
        }
    });

    $("#PageTemplates .ordered-btn.add").click(function (event) {
        event.preventDefault();
        addTemplate(this);
    });

    $("#tbodyPageTemplates .ordered-btn.delete").click(function (event) {
        event.preventDefault();
        deleteTemplate(this);
    });

    $("#tbodyPageTemplates .ordered-btn.up").click(function (event) {
        event.preventDefault();
        moveTemplateUp(this);
    });

    $("#tbodyPageTemplates .ordered-btn.down").click(function (event) {
        event.preventDefault();
        moveTemplateDown(this);
    });

    function getNextID() {
        var rv = nextID - 1;
        nextID = rv;
        return rv.toString();
    }

    function addTemplate(btn) {
        var id = getNextID();
        var html = $("#trPageTemplateXXX").outerHTML().replace(/XXX/g, id);
        $("#tbodyPageTemplates").append(html);
        $("#trPageTemplate" + id + " .ordered-btn.delete").click(function (event) {
            event.preventDefault();
            deleteTemplate(this);
        });
        $("#trPageTemplate" + id + " .ordered-btn.up").click(function (event) {
            event.preventDefault();
            moveTemplateUp(this);
        });
        $("#trPageTemplate" + id + " .ordered-btn.down").click(function (event) {
            event.preventDefault();
            moveTemplateDown(this);
        });
        $("#trPageTemplate" + id + " select").change(function (event) {
            event.preventDefault();
            setSelectedTemplates();
        });
        setSelectedTemplates();
        fixAddButtons();
    }

    function deleteTemplate(btn) {
        var row = $(btn).parents("tr.template.ordered");
        $(row.remove());
        setSelectedTemplates();
        fixAddButtons();
    }

    function moveTemplateUp(btn) {
        var row = $(btn).parents("tr.template.ordered");
        var first = $("#tbodyPageTemplates tr:first-child")
        if (row !== first)
            $(row).insertBefore(row.prev());
        setSelectedTemplates();
    }

    function moveTemplateDown(btn) {
        var row = $(btn).parents("tr.template.ordered");
        var last = $("#tbodyPageTemplates tr:last-child")
        if (row !== last)
            $(row).insertAfter(row.next());
        setSelectedTemplates();
    }

    function setSelectedTemplates() {
        var val = "";
        var join = "";
        $("#tbodyPageTemplates tr").each(function (index, row) {
            var id = $(row).attr("id").replace(/trPageTemplate/g, "") * 1;
            if (id > 0) {
                var id = $(row).data("template-id") * 1;
                val += join + id.toString();
            } else {
                var id = $("#TemplateMasterList" + id.toString()).val();
                if (id > 0)
                    val += join + id.toString();
            }
            join = ",";
        });
        $("#SelectedTemplates").val(val);
    }

    function fixAddButtons() {
        if ($("#tbodyPageTemplates tr").length == 0) {
            $("a.ordered-btn.add").removeClass("some-rows").addClass("no-rows");
        } else {
            $("a.ordered-btn.add").removeClass("no-rows").addClass("some-rows");
        }
    }

    function validateCopy() {
        $("#CopyTemplateID").val($("#TemplateID").val());
        return true;
    }

    function validateSave() {
        @if(@admin)
        {
            <text>$("#OwnerID").val($("#Owner").val());</text>
        }
        return true;
    }
</script>
}
