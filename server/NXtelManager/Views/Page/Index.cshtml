@using NXtelData
@model NXtelManager.Models.PageIndexModel
@{
    ViewBag.Title = "Pages";
    bool viewAllZones = @ViewBag.ViewZone != null;
    bool unzoned = @ViewBag.ViewUnzoned != null;
    bool filtered = !viewAllZones && !unzoned;
    if (viewAllZones)
        ViewBag.Title += " in " + @ViewBag.ViewZone + " Zone";
    if (unzoned)
        ViewBag.Title = "Unzoned Pages";
    string tablePageSize = NXtelData.UserPreferences.Get(System.Security
        .Principal.IPrincipalExtensions.GetUserID(User), "TablePageSize", "10");
    string val = "";
    string val2 = "";
    string val3 = "";
    string mine = Model.Permissions.IsAdmin ? "Owned?" : "Editable?";
    if (Model.Recent)
        ViewBag.Title = "Recently Edited Pages";

}
<h1>@ViewBag.Title</h1>
<h3>@ViewBag.Message</h3>
@if (unzoned)
{
    @Html.ActionLink("All Pages", "Index", "Page")<text> &nbsp; </text>
    @Html.ActionLink("Zones", "Index", "Zone")
}
else if (viewAllZones)
{
    @Html.ActionLink("All Zones", "Index", "Zone")
}
else
{
    @Html.ActionLink("Zones", "Index", "Zone") <text>&nbsp; </text>
    @Html.ActionLink("Unzoned Pages", "Unzoned", "Page")
}
@if (!Model.Recent && Model.Permissions.IsAdmin)
{<text>&nbsp; </text>
    @Html.ActionLink("Recent", "Recent", "Page")
}
    <br />
    <br />
    <table id="PageList" class="paged" style="width:auto">
        <thead>
            <tr>
                <th style="text-align:right">From Page</th>
                <th style="text-align:right">To Page</th>
                <th>Title</th>
                <th>Editable</th>
                <th style="display:none"></th>
                <th style="display:none"></th>
                <th style="display:none"></th>
                @if (Model.Recent)
                {
                    <th>Updated</th>
                    <th>By</th>
                }
          </tr>
        </thead>
        <tbody>
            @foreach (NXtelData.Page page in Model.Pages)
            {
                string primary = page.FrameNo == 0 ? "\uE012" : "";
                bool can = Model.Permissions.Can(page);
                string cls = can ? "unlocked" : "locked";
                val = can ? "You have permission to edit this page" : "You don't have permission to edit this page";
                val2 = can ? "0" : "1";
                val3 = Model.Permissions.IsAdmin ? (page.OwnerID == Model.Permissions.User.UserNo ? "0" : "1") : val2;
                string from = @page.PageNo.ToString("X8") + @page.FrameNo.ToString("X2");
                string to = @page.ToPageNo.ToString("X8") + @page.ToFrameNo.ToString("X2");
                string upd = (@page.Updated ?? DateTime.MinValue).ToString("yyyy-MM-dd hh:mm");
                <tr>
                    <td style="text-align:right;padding-right:32px" data-pageno="@from">@Html.ActionLink(@page.PageAndFrame, "Edit", "Page", new { id = page.PageID }, null)</td>
                    <td style="text-align:right;padding-right:32px" data-pageno="@to">@Html.ActionLink(@page.ToPageAndFrame, "Edit", "Page", new { id = page.PageID }, null)</td>
                    <td>@Html.ActionLink(@page.Title, "Edit", "Page", new { id = page.PageID }, null)</td>
                    <td class="lock @cls" title="@val">@val2</td>
                    <td style="display:none">@val3</td>
                    <td style="display:none">@page.ZoneIDsEncoded</td>
                    <td style="display:none">@primary</td>
                    @if (Model.Recent)
                    {
                        <td>@upd</td>
                        <td>@Model.GetUser(@page.UpdatedByID)</td>
                    }
                </tr>
            }
        </tbody>
    </table>
    <br />
    @Html.ActionLink("New Page", "Edit", "Page", null, new { @class = "btn btn-primary" })

    <div id="PageList_XXX_filter" style="display:none">
        <div class="dataTables_zone">
            <div class="col-sm-6">
                <label style="font-weight:normal">
                    Zones:
                    @Html.DropDownListFor(model => model.Pages.ZoneFilter, Zones.Load().GetSelectList(), new { @class = "form-control input-sm", style = "width:auto;display:inline", id = "ZoneFilter_XXX" })
                </label>
            </div>
        </div>
        <div class="dataTables_primary">
            <div class="col-sm-6">
                <label style="font-weight:normal">
                    @Html.CheckBoxFor(model => model.Pages.PrimaryFilter, new { @class = "form-control input-sm", style = "width:auto;display:inline;height:auto", id = "ZonePrimary_XXX" })
                    <span style="top:3px;position:relative">Primary?</span>
                </label>
            </div>
        </div>
        <div class="dataTables_mine">
            <div class="col-sm-6">
                <label style="font-weight:normal">
                    @Html.CheckBoxFor(model => model.Pages.MineFilter, new { @class = "form-control input-sm", style = "width:auto;display:inline;height:auto", id = "ZoneMine_XXX" })
                    <span style="top:3px;position:relative">@mine</span>
                </label>
            </div>
        </div>
    </div>

    @section scripts {
        <script type="text/javascript">
            $(function () {
                $("#PageList").DataTable({
                    pageLength: @tablePageSize,
                    columnDefs: [
                        { targets: [0, 1], "type": "natural-nohtml" },
                        { targets: [5, 6], orderable: false }
                    ]
                });
                @if (filtered)
                {
                    <text>setupZoneFilter();</text>
                }
                $("#PageList_length select").change(function () {
                    setUserPreference("TablePageSize", $("#PageList_length select").val());
                });
                $("#ZoneFilter_0").change(function () {
                    filter();
                    setUserPreference("PageIndexZone", $("#ZoneFilter_0").val());
                });
                $("#ZonePrimary_0").change(function () {
                    var x = $("#ZonePrimary_0").is(":checked");
                    filter();
                    setUserPreference("PageIndexPrimary", $("#ZonePrimary_0").is(":checked"));
                });
                $("#ZoneMine_0").change(function () {
                    var x = $("#ZoneMine_0").is(":checked");
                    filter();
                    setUserPreference("PageIndexMine", $("#ZoneMine_0").is(":checked"));
                });
            });

            function setupZoneFilter() {
                var html = $("#PageList_XXX_filter").html().replace(/XXX/g, "0");
                $("#PageList_wrapper .row:first-child").append(html);
                filter();
            }

            function filter() {
                var zone = $("#ZoneFilter_0").val();
                var primary = $("#ZonePrimary_0").is(":checked");
                var mine = $("#ZoneMine_0").is(":checked");
                $("#PageList").DataTable()
                    .columns(4).search(getMineRegex(mine), true, false)
                    .columns(5).search(getZoneRegex(zone), true, false)
                    .columns(6).search(getPrimaryRegex(primary), true, false)
                    .draw();
            }

            function getZoneRegex(zone) {
                if (zone == "-1") {
                    return "";
                }
                else if (zone == "-2") {
                    return "^\\uEE11$";
                } else {
                    var rv = "^.*?\\uEE10";
                    for (var i = 0; i < zone.length; i++) {
                        var chr = 60928 + zone.charCodeAt(i) - 48;
                        rv += "\\u" + chr.toString(16).toUpperCase();
                    }
                    rv += "\\uEE10.*?$";
                    return rv;
                }
            }

            function getPrimaryRegex(checked) {
                if (checked) {
                    return "^.+$";
                } else {
                    return "";
                }
            }

            function getMineRegex(checked) {
                if (checked) {
                    return "^0$";
                } else {
                    return "";
                }
            }
        </script>
    }
