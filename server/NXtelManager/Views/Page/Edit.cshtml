@model NXtelManager.Models.PageEditModel
@{
    var page = Model.Page;
    ViewBag.Title = (Model.Copying ? "Copy" : (@page.PageID <= 0 ? "New" : "Edit")) + " Page";
    string pageID = @page.PageID <= 0 ? "NEW" : @page.PageID.ToString();
    string pageNo = @page.PageID <= 0 ? "" : @page.PageNo.ToString();
    string frame = @page.PageID <= 0 ? "" : @page.Frame;
    string toPageNo = @page.PageID <= 0 ? "" : @page.ToPageNo.ToString();
    string toFrame = @page.PageID <= 0 ? "" : @page.ToFrame;
    var rvd = new RouteValueDictionary();
    rvd.Add("id", -1);
    string pageEditURL = Url.Action("Edit", "Page", rvd);
    int z = 0;
    bool admin = User.IsInRole("Admin");
    string zonesLink = admin ? "Manage Zones" : "View Zones";
}
<h1>@ViewBag.Title</h1>
<h3>@ViewBag.Message</h3>
@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.Hidden("CopyPageID", Model.CopyPageID)
    <table id="tblEdit" class="edit">
        <tbody>
            <tr>
                <td class="lbl">Page ID</td>
                <td class="data" colspan="5">@pageID@Html.Hidden("Page.PageID", @page.PageID)</td>
            </tr>
            <tr>
                <td class="lbl">Title</td>
                <td class="data" colspan="5">@Html.TextBox("Page.Title", page.Title, new { maxlength = 30, style = "width:100%;max-width:initial", @class = "form-control input-sm", placeholder = Model.OldTitle })</td>
            </tr>
            <tr>
                <td class="lbl">Page No</td>
                <td class="data">@Html.TextBox("Page.PageNo", pageNo, new { maxlength = 10, style="width:88px;text-align:right", @class = "form-control input-sm", onkeypress = "javascript:return allownumbers(event);", placeholder = Model.OldPageNo })</td>
            </tr>
            <tr>
                <td class="lbl">Frame</td>
                <td class="data">@Html.TextBox("Page.Frame", frame, new { maxlength = 1, style = "text-transform:lowercase;width:88px;text-align:right", @class = "form-control input-sm", onkeypress = "javascript:return allowalpha(event);", placeholder = Model.OldFrame })</td>
            </tr>
            <tr>
                <td class="lbl">To Page No</td>
                <td class="data">@Html.TextBox("Page.ToPageNo", toPageNo, new { maxlength = 10, style = "width:88px;text-align:right", @class = "form-control input-sm", onkeypress = "javascript:return allownumbers(event);", placeholder = Model.OldToPageNo })</td>
            </tr>
            <tr>
                <td class="lbl">To Frame</td>
                <td class="data">@Html.TextBox("Page.ToFrame", toFrame, new { maxlength = 1, style = "text-transform:lowercase;width:88px;text-align:right", @class = "form-control input-sm", onkeypress = "javascript:return allowalpha(event);", placeholder = Model.OldToFrame })</td>
            </tr>
            @*<tr>
                <td class="lbl">Box Mode</td>
                <td class="data">@Html.CheckBox("Page.BoxMode", page.BoxMode)</td>
            </tr>*@
            <tr id="trZones" style="display:none">
                <td class="lbl">Zones</td>
                <td class="data">
                    @Html.Hidden("Page.SelectedZones", page.SelectedZones, new { id = "SelectedZones" })
                    <select id="Zones" multiple="multiple">
                        @foreach (var zone in Model.Zones)
                        {
                            string sel = Model.Page.Zones.Any(r => r.ID.ToString() == zone.Value) ? "selected=selected" : "";
                            <option value="@zone.Value" @sel>@zone.Text</option>
                            z++;
                        }
                    </select>
                    @Html.ActionLink(@zonesLink, "Index", "Zone")
                </td>
            </tr>
            <tr>
                <td class="lbl">URL</td>
                <td class="data">
                    @*<textarea cols="20" id="URL" name="Page_URL" rows="2">@page.URL</textarea>*@
                    @Html.TextArea("Page.URL", page.URL, new { id = "URL", name = "Page_URL", @class = "form-control input-sm", style = "resize:vertical;height:45px;min-height:45px" })
                </td>
            </tr>
            <tr>
                <td class="lbl" style="vertical-align:top">Content</td>
                <td class="data">
                    <div id="canvasframePreview" style="float:left">
                        <canvas id="framePreview" width="960" height="1000" style="width: 576px; height: 500px;"></canvas>
                    </div>
                    <a id="EditContent" href="#" class="ordered ordered-btn edit" onclick="launchEditor();return false;"
                       style="display:inline-block;margin:4px;float:left;display:none" title="Edit page content">Edit</a>
                    <a id="EditZXNet" href="#" class="ordered ordered-btn open" onclick="launchZXNet();return false;"
                       style="display:inline-block;margin:4px;float:left;display:none" title="Open in ZXNet">Open in ZXNet</a>
                    <a id="EditEditTF" href="#" class="ordered ordered-btn open" onclick="launchEditTF(); return false;"
                       style="display:inline-block;margin:4px;float:left;display:none" title="Open in edit-tf">Open in edit-tf</a>
              </td>
            </tr>
            <tr>
                <td class="lbl" style="vertical-align:top">Templates</td>
                <td id="PageTemplates" class="data">
                    @Html.Hidden("Page.SelectedTemplates", page.SelectedTemplates, new { id = "SelectedTemplates" })
                    <table style="display:inline">
                        <tbody id="tbodyPageTemplates">
                            @for (int i = 0; i < page.Templates.Count; i++)
                            {
                                string id = "trPageTemplate" + (i + 1).ToString();
                                string tid = page.Templates[i].TemplateID.ToString();
                                int children = page.Templates[i].CountChildren();
                                string desc = @page.Templates[i].Description + (children == 0 ? "" : " (+" + children + ")");
                                <tr id="@id" + page.Templates[i].TemplateID class="template ordered" data-template-id="@tid">
                                    <td>@Html.Hidden("Templates[" + i + "].TemplateID", page.Templates[i].TemplateID)
                                        @Html.Hidden("Templates[" + i + "].Description", page.Templates[i].Description)
                                        @Html.ActionLink(@desc, "Edit", "Template", new { id = page.Templates[i].TemplateID }, null)</td>
                                    <td><a href="#" class="ordered ordered-btn up" title="Move template up">Up</a></td>
                                    <td><a href="#" class="ordered ordered-btn down" title="Move template down">Down</a></td>
                                    <td><a href="#" class="ordered ordered-btn delete" title="Delete template">Delete</a></td>
                                </tr>
                            }
                        </tbody>
                        <tbody style="display:none">
                            <tr id="trPageTemplateXXX" class="template ordered">
                                <td>@Html.DropDownList("TemplateMasterListXXX", Model.Templates, new { @class = "form-control input-sm" })</td>
                                <td><a href="#" class="ordered ordered-btn up" title="Move template up">Up</a></td>
                                <td><a href="#" class="ordered ordered-btn down" title="Move template down">Down</a></td>
                                <td><a href="#" class="ordered ordered-btn delete" title="Delete template">Delete</a></td>
                            </tr>
                        </tbody>
                    </table>
                    <a href="#" class="ordered ordered-btn add" title="Add template" style="display:inline-block;position:relative;top:-3px">Add</a>
                </td>
            </tr>
            <tr>
                <td class="lbl" style="vertical-align:top">Routing</td>
                <td id="PageRouting" class="data">
                    @Html.Hidden("Page.SelectedRoutes", page.SelectedRoutes, new { id = "SelectedRoutes" })
                    <table style="display:inline">
                        <tbody id="tbodyPageRouting">
                            @for (int i = 0; i < page.Routing.Count; i++)
                                {
                                string id = "trPageRoute" + (i + 1).ToString();
                                string kcode = page.Routing[i].KeyCode.ToString();
                                string clsPage = ((page.Routing[i].GoNextPage || page.Routing[i].GoNextFrame) ? "page-no route-disable" : "page-no") + " form-control input-sm";
                                string clsFrame = ((page.Routing[i].GoNextPage || page.Routing[i].GoNextFrame) ? "frame route-disable" : "frame") + " form-control input-sm";
                                string goTo = @page.Routing[i].GoesToPageID > 0 ? "Go to " + @page.Routing[i].GoesToPageFrameDesc : "No page";
                                <tr id="@id" + page.Routing[i].KeyCode class="route ordered" data-route-keycode="@kcode">
                                    <td>
                                        @Html.Hidden("Routing[" + i + "].KeyCode", page.Routing[i].KeyCode)
                                        @page.Routing[i].Description
                                    </td>
                                    <td>@Html.TextBox("Routing[" + i + "].NextPageNo", page.Routing[i].NextPageNo, new { @class = clsPage, maxlength = 9, style = "width:88px;text-align:right", onkeypress = "javascript:return allownumbers(event);" })</td>
                                    <td>@Html.TextBox("Routing[" + i + "].NextFrame", page.Routing[i].NextFrame, new { @class = clsFrame, maxlength = 1, style = "width:30px;text-align:right;text-transform:lowercase", onkeypress = "javascript:return allowalpha(event);" })</td>
                                    <td>@Html.CheckBox("Routing[" + i + "].GoNextPage", page.Routing[i].GoNextPage, new { @class = "next-page" })<span style="display:inline-block;position:relative;top:-1px">&nbsp;Next&nbsp;Page</span></td>
                                    <td>@Html.CheckBox("Routing[" + i + "].GoNextFrame", page.Routing[i].GoNextFrame, new { @class = "next-frame" })<span style="display:inline-block;position:relative;top:-1px">&nbsp;Next&nbsp;Frame</span></td>
                                    <td style="padding-left:15px"><a href="#" class="go-to-page" onclick="return goToPage(this);">@goTo</a></td>
                                    <td><a href="#" class="ordered ordered-btn delete" title="Delete route">Delete</a></td>
                                </tr>
                            }
                        </tbody>
                        <tbody style="display:none">
                            <tr id="trPageRouteXXX" class="route ordered">
                                <td>@Html.DropDownList("RouteMasterListXXX", Model.Routes, new { @class = "form-control input-sm" })</td>
                                <td>@Html.TextBox("Routing_XXX.NextPageNo", "", new { @class = "page-no form-control input-sm", maxlength = 9, style = "width:88px;text-align:right", onkeypress = "javascript:return allownumbers(event);" })</td>
                                <td>@Html.TextBox("Routing_XXX.NextFrame", "", new { @class = "frame form-control input-sm", maxlength = 1, style = "width:30px;text-align:right;text-transform:lowercase", onkeypress = "javascript:return allowalpha(event);" })</td>
                                <td>@Html.CheckBox("Routing_XXX.GoNextPage", false, new { @class = "next-page" })<span style="display:inline-block;position:relative;top:-1px">&nbsp;Next&nbsp;Page</span></td>
                                <td>@Html.CheckBox("Routing_XXX.GoNextFrame", false, new { @class = "next-frame" })<span style="display:inline-block;position:relative;top:-1px">&nbsp;Next&nbsp;Frame</span></td>
                                <td style="padding-left:15px"><a href="#" class="go-to-page" onclick="return goToPage(this);">No page</a></td>
                                <td><a href="#" class="ordered ordered-btn delete" title="Delete route">Delete</a></td>
                            </tr>
                        </tbody>
                    </table>
                    <a href="#" class="ordered ordered-btn add" title="Add route" style="display:inline-block;position:relative;top:-3px">Add</a>
                </td>
            </tr>
            <tr>
                <td class="lbl" style="vertical-align:top">File</td>
                <td id="PageFile" class="data">
                    @Html.DropDownListFor(model => model.Page.TeleSoftwareID, Model.Files, new { @class = "form-control input-sm", style = "width:auto" })
                </td>
            </tr>

        </tbody>
    </table>
    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    <input type="submit" value="Save" name="action:Save" class="btn btn-primary" onclick="return validateSave();" />
    <input type="submit" value="Delete" name="action:Delete" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this page?');" />
    @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-default" })
    @Html.ActionLink("New", "Edit", new { id = "" }, new { @class = "btn btn-default", style = "margin-left:4px" })
    if (page.PageID > 0)
    {
        @Html.ActionLink("Copy", "Copy", new { id = @page.PageID }, new { @class = "btn btn-default", style = "margin-left:4px" })
    }
}

@section head {
<link type="text/css" rel="stylesheet" href="~/Content/teletext.css" />
<style type="text/css">
    .ordered-btn.no-rows { top: 2.5px !important; }
    .ordered-btn.some-rows { top: -3.5px !important; }
    #PageRouting .ordered-btn.some-rows { top: -6.5px !important; }
</style>
}

@section editor {
    @Html.Partial("_Editor")
}

@section Scripts {
<script type="text/javascript" src="~/Scripts/teletext-editor.js"></script>
<script type="text/javascript" src="~/Scripts/editor.js"></script>
<script type="text/javascript">
    var nextID = 0;
    var checkingRoutes = false;

    $(document).ready(function () {
        $('#Zones').multiselect({
            nonSelectedText: 'None',
            allSelectedText: false,
            numberDisplayed: 0
        });
        $("#trZones").show();
        $(".route-disable").each(function (index, textBox) {
            $(textBox).prop("disabled", "disabled");
        });
        @if(Model.SendURL)
        {
            <text>sendURL();</text>
        }
        fixAddButtons();
    });

    $("#PageTemplates .ordered-btn.add").click(function (event) {
        event.preventDefault();
        addTemplate(this);
    });

    $("#tbodyPageTemplates .ordered-btn.delete").click(function (event) {
        event.preventDefault();
        deleteTemplate(this);
    });

    $("#tbodyPageTemplates .ordered-btn.up").click(function (event) {
        event.preventDefault();
        moveTemplateUp(this);
    });

    $("#tbodyPageTemplates .ordered-btn.down").click(function (event) {
        event.preventDefault();
        moveTemplateDown(this);
    });

    $("#PageRouting .ordered-btn.add").click(function (event) {
        event.preventDefault();
        addRoute(this);
        updateRouteLink(this);
    });

    $("#tbodyPageRouting .ordered-btn.delete").click(function (event) {
        event.preventDefault();
        deleteRoute(this);
    });

    $("#Page_PageNo,#Page_Frame").keyup(function (event) {
        $("#tbodyPageRouting .go-to-page").each(function () {
            updateRouteLink(this);
        });
    });

    $("#tbodyPageRouting .page-no,#tbodyPageRouting .frame").keyup(function (event) {
        updateRouteLink(this);
    });

    $("#tbodyPageRouting .next-page").click(function (event) {
        nextPageChecked(this);
        updateRouteLink(this);
    });

    $("#tbodyPageRouting .next-frame").click(function (event) {
        nextFrameChecked(this);
        updateRouteLink(this);
    });

    $("#tbodyPageRouting .page-no,#tbodyPageRouting .frame").change(function (event) {
        setSelectedRoutes(this);
    });

    function getNextID() {
        var rv = nextID - 1;
        nextID = rv;
        return rv.toString();
    }

    function addTemplate(btn) {
        var id = getNextID();
        var html = $("#trPageTemplateXXX").outerHTML().replace(/XXX/g, id);
        $("#tbodyPageTemplates").append(html);
        $("#trPageTemplate" + id + " .ordered-btn.delete").click(function (event) {
            event.preventDefault();
            deleteTemplate(this);
        });
        $("#trPageTemplate" + id + " .ordered-btn.up").click(function (event) {
            event.preventDefault();
            moveTemplateUp(this);
        });
        $("#trPageTemplate" + id + " .ordered-btn.down").click(function (event) {
            event.preventDefault();
            moveTemplateDown(this);
        });
        $("#trPageTemplate" + id + " select").change(function (event) {
            event.preventDefault();
            setSelectedTemplates();
        });
        setSelectedTemplates();
        fixAddButtons();
    }

    function deleteTemplate(btn) {
        var row = $(btn).parents("tr.template.ordered");
        $(row.remove());
        setSelectedTemplates();
        fixAddButtons();
    }

    function moveTemplateUp(btn) {
        var row = $(btn).parents("tr.template.ordered");
        var first = $("#tbodyPageTemplates tr:first-child")
        if (row !== first)
            $(row).insertBefore(row.prev());
        setSelectedTemplates();
    }

    function moveTemplateDown(btn) {
        var row = $(btn).parents("tr.template.ordered");
        var last = $("#tbodyPageTemplates tr:last-child")
        if (row !== last)
            $(row).insertAfter(row.next());
        setSelectedTemplates();
    }

    function setSelectedTemplates() {
        var val = "";
        var join = "";
        $("#tbodyPageTemplates tr").each(function (index, row) {
            var id = $(row).attr("id").replace(/trPageTemplate/g, "") * 1;
            if (id > 0) {
                var id = $(row).data("template-id") * 1;
                val += join + id.toString();
            } else {
                var id = $("#TemplateMasterList" + id.toString()).val();
                if (id > 0)
                    val += join + id.toString();
            }
            join = ",";
        });
        $("#SelectedTemplates").val(val);
    }

    function addRoute(btn) {
        var id = getNextID();
        var html = $("#trPageRouteXXX").outerHTML().replace(/XXX/g, id);
        $("#tbodyPageRouting").append(html);
        $("#trPageRoute" + id + " .ordered-btn.delete").click(function (event) {
            event.preventDefault();
            deleteRoute(this);
        });
        $("#trPageRoute" + id + " select").change(function (event) {
            event.preventDefault();
            setSelectedRoutes();
        });
        $("#trPageRoute" + id + " .page-no,#trPageRoute" + id + " .frame").keyup(function (event) {
            updateRouteLink(this);
        });
        $("#trPageRoute" + id + " .next-page").change(function (event) {
            nextPageChecked(this);
            updateRouteLink(this);
        });
        $("#trPageRoute" + id + " .next-frame").change(function (event) {
            nextFrameChecked(this);
            updateRouteLink(this);
        });
        $("#trPageRoute" + id + " .page-no,#trPageRoute" + id + " .frame").change(function (event) {
            setSelectedRoutes(this);
        });
        setSelectedRoutes();
        fixAddButtons();
    }

    function deleteRoute(btn) {
        var row = $(btn).parents("tr.route.ordered");
        $(row.remove());
        setSelectedRoutes();
        fixAddButtons();
    }

    function nextPageChecked(ctrl) {
        if (checkingRoutes)
            return;
        checkingRoutes = true;
        var row = $(ctrl).parents("tr.route.ordered");
        var nextPage = $(row).find(".next-page").is(":checked");
        var nextFrame = $(row).find(".next-frame").is(":checked");
        if (nextPage || nextFrame)
            $(row).find("input[type=text]").prop("disabled", "disabled");
        else
            $(row).find("input[type=text]").removeProp("disabled");
        checkingRoutes = false;
        setSelectedRoutes();
    }

    function nextFrameChecked(ctrl) {
        if (checkingRoutes)
            return;
        checkingRoutes = true;
        var row = $(ctrl).parents("tr.route.ordered");
        var nextPage = $(row).find(".next-page").is(":checked");
        var nextFrame = $(row).find(".next-frame").is(":checked");
        if (nextPage || nextFrame)
            $(row).find("input[type=text]").prop("disabled", "disabled");
        else
            $(row).find("input[type=text]").removeProp("disabled");
        checkingRoutes = false;
        setSelectedRoutes();
    }

    function setSelectedRoutes() {
        var val = "";
        var join = "";
        $("#tbodyPageRouting tr").each(function (index, row) {
            var id = $(row).attr("id").replace(/trPageRoute/g, "") * 1;
            if (id > 0)
                var keycode = $(row).data("route-keycode") * 1;
            else
                var keycode = $("#RouteMasterList" + id.toString()).val();
            var pageNo = $(row).find(".page-no").val();
            var frame = $(row).find(".frame").val();
            var goPage = $(row).find(".next-page").is(":checked");
            var goFrame = $(row).find(".next-frame").is(":checked");
            val += join + keycode.toString() + ";" + pageNo + ";" + frame + ";" + goPage + ";" + goFrame;
            join = ",";
        });
        $("#SelectedRoutes").val(val);
    }

    function goToPage(ctrl) {
        var row = $(ctrl).parents("tr.route.ordered");
        var keycode = $(row).data("route-keycode") * 1;
        var json = {};
        json.CurrentPageNo = $("#Page_PageNo").val();
        json.CurrentFrame = $("#Page_Frame").val();
        json.PageNo = $(row).find("input.page-no").val();
        json.Frame = $(row).find("input.frame").val();
        json.NextPage = $(row).find("input.next-page").is(":checked");
        json.NextFrame = $(row).find("input.next-frame").is(":checked");
        $.getJSON('@Url.Action("Route", "Page")', json, function (rv) {
            if (rv.PageID <= 0) {
                alert("This route does not point to a statically-defined page.");
                return;
            }
            var url = "@pageEditURL".replace("-1", rv.PageID.toString());
            window.location = url;
        });
        return false;
    }

    function updateRouteLink(ctrl) {
        var row = $(ctrl).parents("tr.route.ordered");
        ctrl = $(row).find("a.go-to-page");
        var keycode = $(row).data("route-keycode") * 1;
        var json = {};
        json.CurrentPageNo = $("#Page_PageNo").val();
        json.CurrentFrame = $("#Page_Frame").val();
        json.PageNo = $(row).find("input.page-no").val();
        json.Frame = $(row).find("input.frame").val();
        json.NextPage = $(row).find("input.next-page").is(":checked");
        json.NextFrame = $(row).find("input.next-frame").is(":checked");
        $.getJSON('@Url.Action("Route", "Page")', json, function (rv) {
            if (rv.PageID <= 0) {
                $(ctrl).text("No page");
                return;
            }
            $(ctrl).text("Go to " + rv.GoesToPageFrameDesc);
        });
    }

    function fixAddButtons() {
        if ($("#tbodyPageTemplates tr").length == 0) {
            $("#PageTemplates a.ordered-btn.add").removeClass("some-rows").addClass("no-rows");
        } else {
            $("#PageTemplates a.ordered-btn.add").removeClass("no-rows").addClass("some-rows");
        }
        if ($("#tbodyPageRouting tr").length == 0) {
            $("#PageRouting a.ordered-btn.add").removeClass("some-rows").addClass("no-rows");
        } else {
            $("#PageRouting a.ordered-btn.add").removeClass("no-rows").addClass("some-rows");
        }

    }

    function validateRoutes() {
        var valid = true;
        var val = "";
        var join = "";
        var error = "";
        var ctrl = undefined;
        $("#tbodyPageRouting tr").each(function (index, row) {
            if ($(".page-no").is(":enabled") && $(".page-no").val().length == 0) {
                error = "Page No is required.";
                ctrl = $(row).find(".page-no");
                valid = false;
                return false;
            }
            if ($(".frame").is(":enabled") && $(".frame").val().length == 0) {
                error = "Frame is required.";
                ctrl = $(row).find(".frame");
                valid = false;
                return false;
            }
        });
        if (ctrl) {
            $(ctrl).focus();
            setTimeout(function () { alert(error); }, 100);
            return false;
        }
        return true;
    }

    function validateCopy() {
        $("#CopyPageID").val($("#Page_PageID").val());
        return true;
    }

    function validateSave() {
        if (!validateRoutes())
            return false;
        if ($("#Page_Frame").val().length == 0 && $("#Page_PageNo").val().length > 0)
            $("#Page_Frame").val("a");
        if ($("#Page_ToPageNo").val().length == 0 && $("#Page_ToFrame").val().length == 0) {
            $("#Page_ToPageNo").val($("#Page_PageNo").val());
            $("#Page_ToFrame").val($("#Page_Frame").val());
        }
        var zones = [];
        $('#Zones option:selected').each(function () {
            zones.push($(this).val() * 1);
        });
        var list = zones.join();
        $("#SelectedZones").val(list);
        return true;
    }
    </script>
}
