@model FileEditModel
@using NXtelManager.Models
@{
    ViewBag.Title = "Edit File";
    bool can = Model.Permissions.Can(Model.File);
    bool admin = Model.Permissions.IsAdmin;
    bool hasFile = @Model.File.Contents != null && Model.File.Contents.Length > 0 && Model.File.TeleSoftwareID > 0;
    string fn = hasFile && !string.IsNullOrWhiteSpace(Model.File.FileName) ? Model.File.FileName : "Download";
    ViewBag.Title = (@Model.File.TeleSoftwareID <= 0 ? "New" : (can ? "Edit" : "View")) + " File";
    string lockcls = @Model.File.TeleSoftwareID <= 0 ? "new" : (can ? "lock large unlocked" : "lock large locked");
}
<h1>@ViewBag.Title<span class="@lockcls"></span></h1>
<h3>@ViewBag.Message</h3>

@using (Html.BeginForm("Edit", "File", FormMethod.Post, new { @class = "form-horizontal", enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    <div class="form-group">
        @Html.HiddenFor(m => @Model.File.TeleSoftwareID)
        @Html.LabelFor(m => @Model.File.Key, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @Html.TextBoxFor(m => @Model.File.Key, new { maxlength = 15, @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => @Model.File.FileName, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @if (hasFile)
            {
                @Html.ActionLink(fn, "Download", new { id = @Model.File.TeleSoftwareID }, new { @class = "control-label", style = "position:relative;top:7px" })
            }
            else
            {
                @Html.DisplayFor(m => @Model.File.FileName, new { @class = "form-control" })
            }
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => @Model.File.FileSize, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @Html.DisplayFor(m => @Model.File.FileSize, new { @class = "form-control" })
        </div>
    </div>
    if (can)
    {
    <div class="form-group">
        @Html.LabelFor(m => @Model.File.Contents, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            <input id="Contents" type="file" name="Contents" />
        </div>
    </div>
    }
    <div class="form-group">
        @Html.LabelFor(m => @Model.File.OwnerID, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @Html.HiddenFor(m => Model.File.OwnerID)
            @if (admin)
            {
                <select id="Owner" class="form-control input-sm" style="width:auto">
                    @foreach (var owner in Model.Owners)
                    {
                        string sel = Model.File.OwnerID.ToString() == owner.Value ? "selected=\"selected\"" : "";
                        <option @sel value="@owner.Value">@owner.Text</option>
                    }
                </select>
            }
            else
            {
                @Model.GetOwner(Model.File.OwnerID)
            }
        </div>
    </div>

    @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "text-danger" }).ToString()))
    if (can)
    {
    <input type="submit" value="Save" name="action:Save" class="btn btn-primary" onclick="return validateSave();" />
    <input type="submit" value="Delete" name="action:Delete" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this file?');" />
    }
    @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-default" })
}

@section scripts {
    <script type="text/javascript">
        $(document).ready(function () {
        });

        function validateSave() {
            @if(@admin)
            {
                <text>$("#File_OwnerID").val($("#Owner").val());</text>
            }
            return true;
        }
    </script>
}