@model UserEditModel
@using Microsoft.AspNet.Identity;
@using NXtelManager.Models
@{
    ViewBag.Title = "Edit User";
    string myID = (User.Identity as System.Security.Claims.ClaimsIdentity).GetUserID();
    int i = 0;
}
<h1>@ViewBag.Title</h1>
<h3>@ViewBag.Message</h3>

@using (Html.BeginForm("Edit", "User", FormMethod.Post, new { @class = "form-horizontal" }))
{
    @Html.AntiForgeryToken()
    <div class="form-group">
        @Html.HiddenFor(m => @Model.User.ID)
        @Html.HiddenFor(m => @Model.SelectedRolesJSON)
        @Html.LabelFor(m => @Model.User.Email, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @Html.TextBoxFor(m => @Model.User.Email, new { maxlength = 200, @class = "form-control" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => @Model.User.EmailConfirmed, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            <div class="checkbox">
                <label>
                    @Html.CheckBoxFor(m => @Model.User.EmailConfirmed)
                </label>
            </div>
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => @Model.User.FirstName, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @Html.TextBoxFor(m => @Model.User.FirstName, new { @class = "form-control", maxlength = 30 })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => @Model.User.LastName, new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @Html.TextBoxFor(m => @Model.User.LastName, new { @class = "form-control", maxlength = 40 })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(m => @Model.User.Mailbox, new {@class = "control-label col-sm-2" })
        <div class="col-sm-10">
            @Html.TextBoxFor(m => @Model.User.Mailbox, new { @class = "form-control", maxlength = 9, onkeypress = "javascript:return allownumbers(event);" })
        </div>
    </div>
    <div class="form-group">
        @Html.Label("Roles", "Roles", new { @class = "control-label col-sm-2" })
        <div class="col-sm-10">
            <select id="SelectedRoles" multiple="multiple">
                @foreach (var role in Model.Roles)
                {
                    string sel = Model.User.Roles.Any(r => r == role.Text) ? "selected=selected" : "";
                    <option value="@role.Text" @sel>@role.Text</option>
                    i++;
                }
            </select>
        </div>
    </div>

    <div class="form-group">
        @Html.Label("Permissions", "Permissions", new { @class = "control-label col-sm-2" })
        <div id="Permissions" class="col-sm-10">
            @Html.Hidden("SelectedPermissions", @Model.SelectedPermissions, new { id = "SelectedPermissions" })
            <table style="display:inline">
                <tbody id="tbodyPermissions">
                    @for (int j = 0; j < @Model.User.Permissions.Count; j++)
                    {
                        string id = "trPermission" + (j + 1).ToString();
                        string prid = @Model.User.Permissions[j].UserPermissionID.ToString();
                        <tr id="@id" class="permission ordered" data-permission-id="@prid" data-type="@Model.User.Permissions[j].PType">
                            <td class="ptype">@Model.User.Permissions[j].Type.ToString()</td>
                            @if (Model.User.Permissions[j].Type == NXtelData.PermissionTypes.Page)
                            {
                                <td>@Html.TextBox("User.Permissions[" + j + "].From", Model.User.Permissions[j].From, new { @class = "form-control user-permission from to-from allow-numbers", maxlength = 8 })</td>
                                <td>-</td>
                                <td>@Html.TextBox("User.Permissions[" + j + "].To", Model.User.Permissions[j].To, new { @class = "form-control user-permission to to-from allow-numbers", maxlength = 8 })</td>
                            }
                            else if (Model.User.Permissions[j].Type == NXtelData.PermissionTypes.Template)
                            {
                                var ti = @Model.TemplateList.FirstOrDefault(t => t.TemplateID == Model.User.Permissions[j].From) ?? new NXtelData.Template();
                                <td colspan="3" class="desc" data-id="@Model.User.Permissions[j].From" data-type="@Model.User.Permissions[j].PType">@ti.Description</td>
                            }
                            else if (Model.User.Permissions[j].Type == NXtelData.PermissionTypes.Zone)
                            {
                                var zi = @Model.ZoneList.FirstOrDefault(z => z.ID == Model.User.Permissions[j].From) ?? new NXtelData.Zone();
                                <td colspan="3" class="desc" data-id="@Model.User.Permissions[j].From" data-type="@Model.User.Permissions[j].PType">@zi.Description</td>
                            }
                            else if (Model.User.Permissions[j].Type == NXtelData.PermissionTypes.File)
                            {
                                var fi = @Model.FileList.FirstOrDefault(f => f.TeleSoftwareID == Model.User.Permissions[j].From) ?? new NXtelData.TSFile();
                                <td colspan="3" class="desc" data-id="@Model.User.Permissions[j].From" data-type="@Model.User.Permissions[j].PType">@fi.Key</td>
                                @*<td colspan="3"></td>*@
                            }
                            else
                            {
                                <td colspan="3" ></td>
                            }
                            <td><a href="#" class="ordered ordered-btn delete" title="Delete permission">Delete</a></td>
                        </tr>
                    }
                </tbody>
                <tbody style="display:none">
                    <tr id="trPermissionXXX" class="permission ordered" data-permission-id="-1" data-type="-1">
                        <td class="ptype">
                            <select id="ddlPermissionXXX" class="form-control input-sm" onchange="permissionTypeChanged(this);">
                                <option value="0">Page</option>
                                <option value="1">Template</option>
                                <option value="2">Zone</option>
                                <option value="3">File</option>
                            </select>
                        </td>
                        <td class="ptype-page"><input class="form-control user-permission from to-from" maxlength="8" type="text" onkeypress="javascript:return allownumbers(event);"></td>
                        <td class="ptype-page">-</td>
                        <td class="ptype-page"><input class="form-control user-permission to to-from" maxlength="8" type="text" onkeypress="javascript:return allownumbers(event);"></td>
                        <td id="tdPermissionsListsXXX" colspan="3" style="display:none">
                            @Html.DropDownList("TemplateMasterListXXX", Model.Templates, new { @class = "form-control input-sm ptype-template" })
                            @Html.DropDownList("ZoneMasterListXXX", Model.Zones, new { @class = "form-control input-sm ptype-zone" })
                            @Html.DropDownList("FileMasterListXXX", Model.Files, new { @class = "form-control input-sm ptype-file" })
                        </td>
                        <td><a href="#" class="ordered ordered-btn delete" title="Delete permission">Delete</a></td>
                    </tr>
                </tbody>
            </table>
            <a href="#" class="ordered ordered-btn add" title="Add permission" style="display:inline-block;position:relative;top:-3px">Add</a>
        </div>
    </div>


    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
    <input type="submit" value="Save" name="action:Save" class="btn btn-primary" onclick="return saveUser();" />
    if (!Model.User.IsAdmin && Model.User.ID != myID)
    {
        <input type="submit" value="Delete" name="action:DeleteItem" class="btn btn-danger" onclick="return confirm('Are you sure you want to delete this user?');" />
    }
    @Html.ActionLink("Back", "Index", null, new { @class = "btn btn-default" })
}

@section head {
    <link type="text/css" rel="stylesheet" href="~/Content/teletext.css" />
    <style type="text/css">
        #Permissions td input, #Permissions .ptype, #Permissions .desc {
            padding: 2px 4px;
            font-size: 12px;
        }
        #Permissions select {
            padding: 2px 4px;
            font-size: 12px;
            height: unset;
        }
        #Permissions .desc {
            font-weight: bold;
        }
        #Permissions td input.to-from {
            width: 65px;
            height: unset;
            text-align: right; 
        }  
        #Permissions .ptype {
            padding-left: 8px;
        }
      </style>
}

@section scripts {
    <script type="text/javascript">
        var nextID = 0;

        $(document).ready(function () {
            $('#SelectedRoles').multiselect({
                nonSelectedText: 'None',
                allSelectedText: false,
                numberDisplayed: 0
            });
            fixAddPermissionButton();
        });

        function getNextID() {
            var rv = nextID - 1;
            nextID = rv;
            return rv.toString();
        }

        $("#Permissions .ordered-btn.add").click(function (event) {
            event.preventDefault();
            addPermission(this);
        });

        $("#Permissions .ordered-btn.delete").click(function (event) {
            event.preventDefault();
            deletePermission(this);
        });

        $(".allow-numbers").keypress(function(event) {
            return allownumbers(event);
        });

        function addPermission(btn) {
            var id = getNextID();
            var id2 = id.replace("-", "_");
            var html = $("#trPermissionXXX").outerHTML().replace(/XXX/g, id2);
            $("#tbodyPermissions").append(html);
            $("#trPermission" + id2 + " .ordered-btn.delete").click(function (ev) {
                ev.preventDefault();
                deletePermission(this);
            });
            fixAddPermissionButton();
        }

        function deletePermission(btn) {
            var row = $(btn).parents("tr.permission.ordered");
            $(row.remove());
            fixAddPermissionButton();
        }

        function validatePermissions() {
            var valid = true;
            var val = "";
            var join = "";
            var error = "";
            var ctrl = undefined;
            var data = [];
            $("#tbodyPermissions tr").each(function (index, row) {
                var id = $(row).data("permission-id") * 1;
                if (id <= 0) id = -1;
                var ptype = $(row).data("type") * 1;
                if (ptype < 0)
                    ptype = $(row).find("td.ptype select").val() * 1;

                var from = -1;
                var to = -1;
                if (id <= 0) {
                    if (ptype == 0) {
                        from = $.trim($(row).find("input.from").val());
                        if (from === "") from = null;
                        to = $.trim($(row).find("input.to").val());
                        if (to === "") to = null;
                        if (to === null && from !== null) {
                            to = from;
                            $.trim($(row).find("input.to").val(to.toString()));
                        }
                        if (from !== null && to !== null && from > to) {
                            $.trim($(row).find("input.to").val(from.toString()));
                            $.trim($(row).find("input.from").val(to.toString()));
                        }
                    } else if (ptype == 1) {
                        from = $(row).find("select.ptype-template").val() * 1;
                    } else if (ptype == 2) {
                        from = $(row).find("select.ptype-zone").val() * 1;
                    } else if (ptype == 3) {
                        from = $(row).find("select.ptype-file").val() * 1;
                    }
                } else {
                    if (ptype == 0) {
                        from = $.trim($(row).find("input.from").val());
                        if (from === "") from = null;
                        to = $.trim($(row).find("input.to").val());
                        if (to === "") to = null;
                        if (to === null && from !== null) {
                            to = from;
                            $.trim($(row).find("input.to").val(to.toString()));
                        }
                        if (from !== null && to !== null && from > to) {
                            $.trim($(row).find("input.to").val(from.toString()));
                            $.trim($(row).find("input.from").val(to.toString()));
                        }
                    } else {
                        from = $(row).find("td.desc").data("id") * 1;
                    }
                }

                if (from === null) {
                    $(row).find("input.from").focus();
                    setTimeout(function () {
                        alert("Please enter a Page Number");
                    }, 100);
                    valid = false;
                    return false;
                }

                if (!valid)
                    return false;

                var item = {};
                item.UserPermissionID = id;
                item.Type = ptype;
                item.From = from == null ? -1 : (from * 1);
                item.To = to === null ? -1 : (to * 1);
                data.push(item);
                return true;

            });

            $("#SelectedPermissions").val(JSON.stringify(data));
            return valid;
        }

        function validateName() {
            if ($("#User_FirstName").val().length > 0 && $("#User_LastName").val().length > 0)
                return true;
            var valid = true;
            var val = "";
            var join = "";
            var error = "";
            var ctrl = undefined;
            var roles = $("#SelectedRoles").val();
            if (roles == null || roles == undefined)
                roles = [];
            var mandatory = false;
            $.each(roles, function () {
                if (this == "Admin") {
                    mandatory = true;
                    return false;
                }
                if (this == "Page Editor") {
                    mandatory = true;
                    return false;
                }
            });
            if (!mandatory)
                return true;
            if (valid && $("#User_FirstName").val().length == 0) {
                error = "First Name is required.";
                ctrl = $("#User_FirstName");
                valid = false;
            }
            if (valid && $("#User_LastName").val().length == 0) {
                error = "Last Name is required.";
                ctrl = $("#User_LastName");
                valid = false;
            }
            if (ctrl) {
                $(ctrl).focus();
                setTimeout(function () { alert(error); }, 100);
                return false;
            }
            return true;
        }

        function saveUser() {
            if (!validateName())
                return false;
            if (!validatePermissions())
                return false;
            $("#SelectedRolesJSON").val($("#SelectedRoles").val());
            return true;
        }

        function fixAddPermissionButton() {
            if ($("tr.permission").length <= 1) {
                $("a.ordered-btn.add").removeClass("some-rows").addClass("no-rows");
            } else {
                $("a.ordered-btn.add").removeClass("no-rows").addClass("some-rows");
            }
        }

        function permissionTypeChanged(ctrl) {
            var id = $(ctrl).attr("id").replace(/ddlPermission_/g, "");
            var ptype = $(ctrl).val() * 1;
            $("#trPermission_" + id + " .ptype-page").toggle(ptype == 0);
            $("#tdPermissionsLists_" + id).toggle(ptype != 0);
            $("#trPermission_" + id + " .ptype-template").toggle(ptype == 1);
            $("#trPermission_" + id + " .ptype-zone").toggle(ptype == 2);
            $("#trPermission_" + id + " .ptype-file").toggle(ptype == 3);
        }
    </script>
}